import { useState } from 'react';
import { Canvas } from '@react-three/fiber';
import { motion, AnimatePresence } from 'framer-motion';
import { Github, Globe, X, ChevronLeft, ChevronRight } from 'lucide-react';
import { useTheme } from '../utils/ThemeContext';
import Scene from '../components/Scene';

const projects = [
  {
    title: "BloodLink",
    description: "Bloodlink serves as a platform for users and multiple blood banks to register, it will be many-to-many relationship scheme at core. Users can donate/request blood, register for camps, and access donation/request history. Registered blood banks can change the status of received donations/blood requests, create new blood camps, manage blood donations of registered donors in the blood camp. Users can filter blood banks & camps by state, district, & date.",
    tech: ["React", "Javascript",  "Node.js", "MongoDB", "TailwindCSS"],
    github: "https://github.com/UjjwalSk/BloodLink",
    cover: "/assets/images/projects/Bloodlink/cover.jpeg",
    images: [
      "/assets/images/projects/Bloodlink/1.png",
      "/assets/images/projects/Bloodlink/2.png",
      "/assets/images/projects/Bloodlink/3.png",
      "/assets/images/projects/Bloodlink/4.png",
      "/assets/images/projects/Bloodlink/5.png",
      "/assets/images/projects/Bloodlink/6.png",
      "/assets/images/projects/Bloodlink/7.png",
      "/assets/images/projects/Bloodlink/8.png",
      "/assets/images/projects/Bloodlink/9.png",
      "/assets/images/projects/Bloodlink/10.png",
      "/assets/images/projects/Bloodlink/11.png",
      "/assets/images/projects/Bloodlink/12.png",
      "/assets/images/projects/Bloodlink/13.png",
      "/assets/images/projects/Bloodlink/14.png",
      "/assets/images/projects/Bloodlink/15.png",
      "/assets/images/projects/Bloodlink/16.png",
      "/assets/images/projects/Bloodlink/17.png",
      "/assets/images/projects/Bloodlink/18.png",
      "/assets/images/projects/Bloodlink/19.png",
      "/assets/images/projects/Bloodlink/20.png"
    ]
  },
  {
    title: "Task-Manager But Cool",
    description: "Personal Task Manager, a task manager project to manage your daily tasks category wise with a clean & sweet UI built in REACT with spring-boot server on backend with all of the CRUD operations implemented.",
    tech: ["ReactJs", "Spring Boot", "Docker", "Kubernetes", "PostgreSQL"],
    github: "https://github.com/username/project3", // TODO:: REPO IS MISSING NO GITHUB [MongoDB]!!! ADD HERE
    cover: "/assets/images/projects/CoolTaskManager/cover.jpeg",
    images: [
      "/assets/images/projects/CoolTaskManager/1.png",
      "/assets/images/projects/CoolTaskManager/2.png",
      "/assets/images/projects/CoolTaskManager/3.png",
      "/assets/images/projects/CoolTaskManager/4.png",
      "/assets/images/projects/CoolTaskManager/5.png",
      "/assets/images/projects/CoolTaskManager/6.png",
    ]
  },
  {
    title: "Kawach",
    description: "A QR Code-based locking application, which allow users to lock their device after scanning a QR Code linked to a server. This application ensures that all device features, including internet connectivity and camera access, will be disabled until the QR Code is scanned and validated again. The QR is generated by a separate server application which also keeps track of the logs related to every new entry added. The application is developed using Java for  Android platform.",
    tech: ["Java", "Javascript", "Node.js", "Express", "MySQL", "AndroidStudio"],
    github: "",
    live: "",
    cover: "/assets/images/projects/Kawach/cover.png",
    images: [
      "/assets/images/projects/Kawach/1.png",
      "/assets/images/projects/Kawach/2.png",
      "/assets/images/projects/Kawach/3.png",
      "/assets/images/projects/Kawach/4.png",
      "/assets/images/projects/Kawach/5.png",
      "/assets/images/projects/Kawach/6.png",
      "/assets/images/projects/Kawach/7.png",
      "/assets/images/projects/Kawach/8.png",
    ]
  },
  {
    title: "Twitter Clone",
    description: "A simple twitter clone",
    tech: ["Node.js", "Express.js", "ReactJS", "Material-UI", "Mysql"],
    github: "https://github.com/UjjwalSk/twitter_",
    cover: "/assets/images/projects/TwitterClone/cover.png",
    images: [
      "/assets/images/projects/TwitterClone/1.png",
      "/assets/images/projects/TwitterClone/2.png",
      "/assets/images/projects/TwitterClone/3.png",
      "/assets/images/projects/TwitterClone/4.png",
      "/assets/images/projects/TwitterClone/5.png",
      "/assets/images/projects/TwitterClone/6.png",
      "/assets/images/projects/TwitterClone/7.png",
      "/assets/images/projects/TwitterClone/8.png",
    ]
  },
  {
    title: "MyWorld",
    description: "MyWorld is a blogging website that allows its users to create, edit or delete blogs or published articles. Any user can change his previously created blog at any time. Authentication is done on the portal. Only the user logged in can change the content or publish any blog. Seperate light and dark theme for the website is also provided. The purpose of this Project is to implement the CRUD (Create, Read, Update, Delete) operations related to database on a Real-Time example.",
    tech: ["React.js", "Tailwind", "JSON-Server"],
    github: "https://github.com/UjjwalSk/myWorld",
    cover: "/assets/images/projects/MyWorld/cover.jpeg",
    images: [
      "/assets/images/projects/MyWorld/1.png",
      "/assets/images/projects/MyWorld/2.png",
      "/assets/images/projects/MyWorld/3.png",
      "/assets/images/projects/MyWorld/4.png"
    ]
  },
  {
    title: "Traximo",
    description: "Traximo is a collection of #MoveToPlay games which encourages physical activities to play digital games. It increases engagement and interaction and provides a richer user experience. All of this is achieved through motion detection only using webcams installed in our devices. Our goal is to blend the immersiveness of virtual world with the active movements of physical world without any expensive devices.",
    tech: ["HTML", "CSS", "Javascript", "P5js", "HandsFree.js", "ThreeJS", "CanonJS", ""],
    github: "https://github.com/UjjwalSk/Traximo",
    cover: "/assets/images/projects/Traximo/cover.png",
    images: [
      "/assets/images/projects/Traximo/1.png",
      "/assets/images/projects/Traximo/2.png",
      "/assets/images/projects/Traximo/3.png",
      "/assets/images/projects/Traximo/4.png",
    ]
  },
  {
    title: "3D Audio Visualizer",
    description: "3d_audio_visualizer is tool by which you can visualize the frequency values of any audio/music file it will map all those value to a 3d plane's vertices and make them move as per those values. You can also use your mic and see the live output of your voice onto the plane. The project is developed using JS, THREE JS, HTML & some CSS !",
    tech: ["Three.js", "HTML", "CSS"],
    github: "https://github.com/UjjwalSk/3d_audio_visualizer",
    live: "https://ujjwalsk.github.io/3d_audio_visualizer/",
    cover: "/assets/images/projects/3dAudioVisualizer/cover.jpeg",
    images: [
      "/assets/images/projects/3dAudioVisualizer/1.png",
      "/assets/images/projects/3dAudioVisualizer/2.png",
      "/assets/images/projects/3dAudioVisualizer/3.png",
      "/assets/images/projects/3dAudioVisualizer/4.png",
      "/assets/images/projects/3dAudioVisualizer/5.png",
      "/assets/images/projects/3dAudioVisualizer/6.png",
    ]
  },
  {
    title: "Task-Manager [NodeJS]",
    description: "Personal Task Manager, a task manager project to manage your daily tasks category wise with a clean & sweet UI built in REACT with express on backend with all of the CRUD operations implemented.",
    tech: ["ReactJs", "Node.JS", "ExpressJS", "MySQL"],
    github: "https://github.com/UjjwalSk/Task-Manager-Nodejs-MySql", 
    cover: "/assets/images/projects/CoolTaskManager/cover.jpeg",
    images: [
      "/assets/images/projects/CoolTaskManager/1.png",
      "/assets/images/projects/CoolTaskManager/2.png",
      "/assets/images/projects/CoolTaskManager/3.png",
      "/assets/images/projects/CoolTaskManager/4.png",
      "/assets/images/projects/CoolTaskManager/5.png",
      "/assets/images/projects/CoolTaskManager/6.png",
    ]
  },
  {
    title: "3d Solar System",
    description: "Just a clean simple, clean & interactive 3d website to know the weight of any object on different planets of our solar system relative to earth. This project was a mini university project but I just added 3d objects & created a interactive environment. Built using node JS, THREE JS & plain HTML & CSS !",
    tech: ["Three.js", "Javascript", "HTML", "CSS"],
    github: "https://github.com/UjjwalSk/ST3-weight-on-other-planets",
    live: "https://ujjwalsk.github.io/ST3-weight-on-other-planets/",
    cover: "/assets/images/projects/3dSolarSystem/cover.jpeg",
    images: [
      "/assets/images/projects/3dSolarSystem/1.png",
      "/assets/images/projects/3dSolarSystem/2.png",
      "/assets/images/projects/3dSolarSystem/3.png",
      "/assets/images/projects/3dSolarSystem/4.png",
      "/assets/images/projects/3dSolarSystem/5.png",
      "/assets/images/projects/3dSolarSystem/6.png",
    ]
  },
  {
    title: "Me2",
    description: "Online video chat application similar to GMeet using ZegoCloud",
    tech: ["ReactJS", "ZegoCloud", "NodeJS", "MySQL"],
    github: "https://github.com/UjjwalSk/Me2/",
    cover: "/assets/images/projects/Me2/cover.png",
    images: [
      "/assets/images/projects/Me2/1.png",
      "/assets/images/projects/Me2/2.png",
    ]
  },
  {
    title: "Asteroids",
    description: "Asteroids, an OG space-themed 2d game where you control the spaceship to destroy the asteroids",
    tech: ["Javascript", "P5.js", "HTML", "CSS", "TailwindCSS"],
    github: "https://github.com/UjjwalSk/Asteroids",
    live: "https://ujjwalsk.github.io/Asteroids/",
    cover: "/assets/images/projects/Asteroids/cover.png",
    images: [
      "/assets/images/projects/Asteroids/1.png",
      "/assets/images/projects/Asteroids/2.png"
    ]
  },
  {
    title: "MacOS Web Clone",
    description: "Just a personal project for fine-tuning react & styling skills :) [In Progress, Not Complete]",
    tech: ["ReactJS", "SASS"],
    github: "https://github.com/UjjwalSk/Macx-web-clone/",
    cover: "/assets/images/projects/MacClone/1.png",
    images: [
      "/assets/images/projects/MacClone/1.png",
      "/assets/images/projects/MacClone/2.png",
      "/assets/images/projects/MacClone/3.png",
      "/assets/images/projects/MacClone/4.png",
    ]
  },
  {
    title: "Visual Fractal Tree",
    description: "Recursive Fractal Tree generated using python with turtle library to showcase how recursion works",
    tech: ["Python", "Turtle"],
    github: "https://github.com/UjjwalSk/fractal_tree_turtle",
    cover: "/assets/images/projects/FractalPython/1.png",
    images: [
      "/assets/images/projects/FractalPython/1.png",
      "/assets/images/projects/FractalPython/2.png",
    ]
  },
  {
    title: "Visual Fourier Series",
    description: "A basic & simple visual wave representation of fourier series, a series of wave patterns that when summed up together approximate some other functions",
    tech: ["HTML", "Javascript", "P5.js"],
    github: "https://github.com/UjjwalSk/fourier_basic_wave",
    live: "https://ujjwalsk.github.io/fourier_basic_wave/",
    cover: "/assets/images/projects/FourierWave/1.png",
    images: [
      "/assets/images/projects/FourierWave/1.png",
      "/assets/images/projects/FourierWave/2.png",
      "/assets/images/projects/FourierWave/3.png",
    ]
  },
  {
    title: "InfoPanel",
    description: "A Mysql Case Study project to implement CRDs to manage multiple institute' system entities & maintain the large stock of information in any institute by utilizing best data management practices",
    tech: ["Mysql", "phpMyAdmin", "Canva", "Python", "Tkinter", ],
    github: "https://github.com/UjjwalSk/infoPanel",
    live: "https://ujjwalsk.github.io/infoPanel/",
    cover: "/assets/images/projects/InfoPanel/1.png",
    images: [
      "/assets/images/projects/InfoPanel/1.png",
      "/assets/images/projects/InfoPanel/2.png",
      "/assets/images/projects/InfoPanel/3.png",
      "/assets/images/projects/InfoPanel/4.png",
    ]
  },
  {
    title: "MusicPlayer",
    description: "The very first project done using HTML, CSS & JS combined :|",
    tech: ["HTML", "CSS", "Javascript"],
    github: "https://github.com/UjjwalSk/Music-Player-qwerty",
    live: "https://ujjwalsk.github.io/Music-Player-qwerty/",
    cover: "/assets/images/projects/MusicPlayer/cover.png",
    images: [
      "/assets/images/projects/MusicPlayer/1.png",
      "/assets/images/projects/MusicPlayer/2.png",
      "/assets/images/projects/MusicPlayer/3.png",
    ]
  },
  {
    title: "Sorting Algorithms Visualizer",
    description: "A tool to visualize multiple sorting algorithms for better understanding of the logic building",
    tech: ["HTML", "CSS", "Javascript"],
    github: "https://github.com/UjjwalSk/Sorting-Visualizer",
    live: "https://ujjwalsk.github.io/Sorting-Visualizer/",
    cover: "/assets/images/projects/SortingVisualizer/cover.png",
    images: [
      "/assets/images/projects/SortingVisualizer/1.png",
      "/assets/images/projects/SortingVisualizer/2.png",
      "/assets/images/projects/SortingVisualizer/3.png",
      "/assets/images/projects/SortingVisualizer/4.png",
      "/assets/images/projects/SortingVisualizer/5.png",
    ]
  },
  {
    title: "Stellar - Car Rental Website Project",
    description: "One of the initial HTML, CSS & JS project which serves a web platform for a car rental business [Imaginary :)]",
    tech: ["HTML", "CSS", "Javascript"],
    github: "https://github.com/UjjwalSk/stellar",
    live: "https://ujjwalsk.github.io/stellar/",
    cover: "/assets/images/projects/Stellar/cover.png",
    images: [
      "/assets/images/projects/Stellar/1.png",
      "/assets/images/projects/Stellar/2.png",
      "/assets/images/projects/Stellar/3.png",
      "/assets/images/projects/Stellar/4.png",
      "/assets/images/projects/Stellar/5.png",
      "/assets/images/projects/Stellar/6.png",
      "/assets/images/projects/Stellar/7.png",
      "/assets/images/projects/Stellar/8.png",
    ]
  },
  {
    title: "Random Thoughts Generator",
    description: "An initial project for hands-on on APIs, the projects lets you generate a random thought/quote on very new click to motivate & fuel you with energy!",
    tech: ["HTML", "CSS", "Javascript", "APIs", "Forismatic"],
    github: "https://github.com/UjjwalSk/Random-Thought-Generator",
    live: "https://ujjwalsk.github.io/Random-Thought-Generator/",
    cover: "/assets/images/projects/RandomThoughtGenerator/cover.png",
    images: [
      "/assets/images/projects/RandomThoughtGenerator/1.png",
      "/assets/images/projects/RandomThoughtGenerator/2.png",
    ]
  },
  {
    title: "Python GUI Database Project",
    description: "My very first python project, creating a python tkinter based GUI to maintain Students & Teachers listings, their batch, courses offered, courses taken, allocations etc.",
    tech: ["Python"],
    github: "https://github.com/UjjwalSk/Python-GUI-Student-Database-Project/",
    cover: "/assets/images/projects/PyGUIDBProject/cover.png",
    images: [
      "/assets/images/projects/PyGUIDBProject/cover.png",
    ]
  }
];

function ProjectModal({ project, onClose }: { project: typeof projects[0]; onClose: () => void }) {
  const [currentImageIndex, setCurrentImageIndex] = useState(0);
  
  const nextImage = () => {
    setCurrentImageIndex((prev) => (prev + 1) % project.images.length);
  };
  
  const prevImage = () => {
    setCurrentImageIndex((prev) => (prev - 1 + project.images.length) % project.images.length);
  };

  const handleKeyPress = (e: KeyboardEvent) => {
    if (e.key === "Escape") {
      onClose();
    }
  };

  window.addEventListener("keydown", handleKeyPress);

  return (
    <motion.div
      initial={{ opacity: 0 }}
      animate={{ opacity: 1 }}
      exit={{ opacity: 0 }}
      className="fixed inset-0 bg-black/60 backdrop-blur-sm z-50 overflow-y-auto"
      onClick={onClose}
    >
      <div className="min-h-screen px-4 py-8 flex items-center justify-center">
        <motion.div
          initial={{ scale: 0.9, opacity: 0 }}
          animate={{ scale: 1, opacity: 1 }}
          exit={{ scale: 0.9, opacity: 0 }}
          className="bg-white/10 backdrop-blur-md rounded-2xl p-6 w-full max-w-4xl relative"
          onClick={(e) => e.stopPropagation()}
        >
          <motion.button
            onClick={onClose}
            animate={{ scale: 1, opacity: 1 }}
            whileHover={{ scale: 1.1 }}
            className="absolute -top-4 -right-3 text-white transition-colors bg-red-600/90 rounded-lg p-1 z-10"
          >
            <X size={24} />
          </motion.button>

          {/* Gallery */}
          <div className="relative aspect-video mb-6 rounded-lg overflow-hidden group">
            <AnimatePresence mode="wait">
              <motion.img
                key={currentImageIndex}
                src={project.images[currentImageIndex]}
                alt={`${project.title} preview ${currentImageIndex + 1}`}
                className="w-full h-full object-contain transform group-hover:scale-110 transition-transform duration-500"
                initial={{ opacity: 0, x: 100 }}
                animate={{ opacity: 1, x: 0 }}
                exit={{ opacity: 0, x: -100 }}
                transition={{ duration: 0.3 }}
              />
            </AnimatePresence>

            <div className="absolute inset-0 flex items-center justify-between p-4 opacity-0 group-hover:opacity-100 transition-opacity">
              <button
                onClick={(e) => {
                  e.stopPropagation();
                  prevImage();
                }}
                className="bg-black/50 hover:bg-black/70 text-white rounded-full p-2 backdrop-blur-sm transition-colors"
              >
                <ChevronLeft size={24} />
              </button>
              <button
                onClick={(e) => {
                  e.stopPropagation();
                  nextImage();
                }}
                className="bg-black/50 hover:bg-black/70 text-white rounded-full p-2 backdrop-blur-sm transition-colors"
              >
                <ChevronRight size={24} />
              </button>
            </div>

            <div className="absolute bottom-4 left-1/2 -translate-x-1/2 flex gap-2">
              {project.images.map((_, index) => (
                <button
                  key={index}
                  onClick={(e) => {
                    e.stopPropagation();
                    setCurrentImageIndex(index);
                  }}
                  className={`w-2 h-2 rounded-full transition-colors ${
                    index === currentImageIndex ? 'bg-white' : 'bg-white/50'
                  }`}
                />
              ))}
            </div>
          </div>

          <div className="text-white">
            <div className="flex items-center justify-between mb-4">
              <h2 className="text-3xl font-bold">{project.title}</h2>
              <div className="flex gap-4">
                <a
                  href={project.github}
                  target="_blank"
                  rel="noopener noreferrer"
                  className="text-white/70 hover:text-white transition-colors"
                  onClick={(e) => e.stopPropagation()}
                >
                  <Github size={24} />
                </a>
                {project.live && (
                  <a
                    href={project.live}
                    target="_blank"
                    rel="noopener noreferrer"
                    className="text-white/70 hover:text-white transition-colors"
                    onClick={(e) => e.stopPropagation()}
                  >
                    <Globe size={24} />
                  </a>
                )}
              </div>
            </div>

            <p className="text-white/70 mb-6">{project.description}</p>

            <div className="flex flex-wrap gap-2">
              {project.tech.map((tech) => (
                <span
                  key={tech}
                  className="px-3 py-1 bg-white/10 rounded-full text-sm text-white/70"
                >
                  {tech}
                </span>
              ))}
            </div>
          </div>
        </motion.div>
      </div>
    </motion.div>
  );
}

function Projects() {
  const [selectedProject, setSelectedProject] = useState<typeof projects[0] | null>(null);
  const { theme } = useTheme();

  return (
    <div className={`min-h-screen overflow-hidden relative ${theme.background}`}>
        <motion.div 
              className={`absolute inset-0 ${theme.background}`} // TODO: add themes here
              style={{
                transformPerspective: "1000px"
              }}
            >
      <Canvas camera={{ position: [0, 0, 10] }}>
          <ambientLight intensity={0.5} />
          <pointLight position={[10, 10, 10]} />
          <Scene />
        </Canvas>
      </motion.div>
      
      <div className={`relative pt-24`}>
        <motion.div
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          className="max-w-6xl mx-auto text-center"
        >
          <motion.h2
            initial={{ y: -20 }}
            animate={{ y: 0 }}
            className={`text-5xl font-bold ${theme.text} mb-4`}
          >
            Featured Projects
          </motion.h2>
          <motion.p
            initial={{ y: 20 }}
            animate={{ y: 0 }}
            className={`text-gray-500 text-lg`}
          >
            Explore some of my personal projects & experiments that I've worked upon
          </motion.p>

          <div className="grid md:grid-cols-2 lg:grid-cols-3 gap-8 my-12">
            {projects.map((project, index) => (
              <motion.div
                key={index}
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ delay: index * 0.1 }}
                onClick={() => setSelectedProject(project)}
                className="group cursor-pointer backdrop-blur-sm"
              >
                <div className="relative rounded-2xl p-6 transition-all duration-500 transform hover:-translate-y-2 bg-black/30 h-full">
                  <div className="absolute inset-0 rounded-2xl" />  
                  <div className="relative">
                    <div className="aspect-video rounded-lg overflow-hidden mb-4">
                      <img
                        src={project.cover}
                        alt={project.title}
                        className="w-full h-full object-contain transform group-hover:scale-110 transition-transform duration-500"
                      />
                    </div>

                    <h3 className="text-2xl font-semibold text-white mb-2">{project.title}</h3>
                    <p className="text-white/70 mb-4 line-clamp-2">{project.description}</p>

                    <div className="flex flex-wrap gap-2 mb-4">
                      {project.tech.map((tech) => (
                        <span
                          key={tech}
                          className="px-3 py-1 bg-white/10 rounded-full text-sm text-white/70"
                        >
                          {tech}
                        </span>
                      ))}
                    </div>

                    <div className="flex justify-end gap-4">
                      {project.github && <a
                        href={project.github}
                        target="_blank"
                        rel="noopener noreferrer"
                        className="text-white/90 hover:text-white transition-colors"
                        onClick={(e) => e.stopPropagation()}
                      >
                        <Github size={20} />
                      </a>}
                      {project.live && <a
                        href={project.live}
                        target="_blank"
                        rel="noopener noreferrer"
                        className="text-white/90 hover:text-white transition-colors"
                        onClick={(e) => e.stopPropagation()}
                      >
                        <Globe size={20} />
                      </a>}
                    </div>
                  </div>
                </div>
              </motion.div>
            ))}
          </div>
        </motion.div>
      </div>

      <AnimatePresence>
        {selectedProject && (
          <ProjectModal
            project={selectedProject}
            onClose={() => setSelectedProject(null)}
          />
        )}
      </AnimatePresence>
    </div>
  );
}

export default Projects;